package com.manql.ManqlKeyboard;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileInputStream;
import java.util.Scanner;
import java.util.Comparator;
import java.util.ArrayList;
import java.util.Collections;

public class WordSearch {
	private final int MAX_LEN = 30;
	private final int MAX_DB = 100;
	private final int MAX_QWERTY = 4;
	private final double QWERTY_DIST = 0.0;
	public Tree dictree;
	public Tree mytree;
	public void main(String argc[]){
		System.out.println("Read start");
		DBset();
		System.out.println("Read ok");
		inil();
		state(0,0);
		state(0,0);
		state(0,0);
//		state(0,0);
		state(0,-1);
	}
	public WordSearch()
	{
		qwerty_co = new point[MAX_LEN];
		for(int i=0; i<MAX_LEN; i++)
		{
			qwerty_co[i] = new point();
		}
		DBset();
		init();
	}
	public void DBset()
	{
		int i=0;
		FileInputStream fi = null;
		try {
			fi = new FileInputStream("frequency.txt");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Scanner in = new Scanner(fi);
		dictree = new Tree();
		mytree = new Tree();
		while(in.hasNext())
		{
			String n = in.next(); /// max length = 22
			if(n.length()>0)
				dictree.insert(n,freq_find(i));
			i++;
		}
//		System.out.println(""+dictree.setfreq(dictree.root));
		
		
		//mytree.print(mytree.root);
		
	}
	private double freq_find(int i)
	{
		return 20 - Math.log((double)i+1.5)/Math.log(2);
	}
	public void go()
	{
		int i;
		for(i=0; i<pre_len; i++)
		{
			System.out.println("  "+pre[i].s+" "+pre[i].f + " " +Node.getfreq(dictree.root,pre[i].s));
			
		}
		for(i=0; i<10 && i<fin.size(); i++)
		{
			System.out.println(fin.get(i).s + "  " + fin.get(i).f);
		}
		
	}
	public void init()
	{
		input_len=0;
		pre_len = 0;
		inild();
	}
	private point[] qwerty_co; 
	private point input;
	private int input_len;
	private pair[] now;
	private ArrayList<pair> fin;
	private pair[] pre;
	private int pre_len;
	private ArrayList<pair> temp;
	private int[] in_l;
	private pair[][] character;
	private double tm_limit;
	private void inild()
	{
		input = new point();
	//	qwerty_co = new point[MAX_LEN];
//		for(int i=0; i<MAX_LEN; i++)
//		{
//			qwerty_co[i] = new point();
//		}
		now = new pair[MAX_DB];
		pre = new pair[MAX_DB];
		fin = new ArrayList<pair>();
		temp = new ArrayList<pair>();
		qt = new ArrayList<pair>();
		
		in_l = new int[MAX_LEN];
		character = new pair[MAX_LEN][];

		input_len=0;
		pre_len = 1;
		pre[0] = new pair();
	}
	public String getfin(int i)
	{
		if(i<pre_len)
			return fin.get(i).s;
		return "";
	}
	public double getfinf(int i)
	{
		if(i<pre_len)
			return fin.get(i).f;
		return 0;
	}
	public void qwerty_set(point[] qt)
	{
		int i;
		for(i=0; i<26; i++)
		{
			qwerty_co[i] = new point();
			qwerty_co[i]= qt[i];
		}
	}
	public void qwerty_set(int[] x,int[] y)
	{
		int i;
		for(i=0; i<26; i++)
		{
			qwerty_co[i] = new point(x[i],y[i]);
		}
	}
	
	public ArrayList<pair> qt;
	private void getchar(point in)
	{
		int i, j;
		double sum=0;
		String ts;
		double tm;
		qt.clear();
		char dd = 'a';
		for(i=0; i<26; i++)
		{
			ts = Character.toString(dd);
			tm = 1/in.dist(qwerty_co[i]);
			qt.add(new pair(ts,tm));
			sum+=tm;
			dd++;
		}
		Collections.sort(qt);
		sum = qt.get(0).f;
		character[input_len] = new pair[MAX_QWERTY];
		tm_limit=0;
		for(i=0;i<MAX_QWERTY; i++)
		{
//			if(qt.get(i).f < sum*QWERTY_DIST)
//				break;
			character[input_len][i] = new pair(qt.get(i).s,qt.get(i).f);
	//		System.out.println(""+pre_len+" "+(i+1));
			if(pre_len >= MAX_DB-1 && tm_limit<pre[(pre_len-1)/(i+1)].f * character[input_len][i].f)
				tm_limit = pre[(pre_len-1)/(i+1)].f * character[input_len][i].f;
			
		}
		//out에 어떻게 잘 넣었다고 치자.zz
		in_l[input_len] = i;
		
		
		
	/*	for(int i=0; i<in_l[input_len]; i++)
		{
			character[input_len][i] = new pair("a",0.5);
		}
		
		if(input_len == 0)
		{
			character[input_len][0] = new pair("d",0.8);
			character[input_len][1] = new pair("t",0.3);
			character[input_len][2] = new pair("r",0.5);
			character[input_len][3] = new pair("f",0.2);
		}if(input_len == 1)
		{
			character[input_len][0] = new pair("d",0.5);
			character[input_len][1] = new pair("e",0.5);
			character[input_len][2] = new pair("h",0.5);
			character[input_len][3] = new pair("f",0.2);
		}if(input_len == 2)
		{
			character[input_len][0] = new pair("d",0.5);
			character[input_len][1] = new pair("e",0.6);
			character[input_len][2] = new pair("r",0.5);
			character[input_len][3] = new pair("f",0.2);
		}if(input_len == 3)
		{
			character[input_len][0] = new pair("d",0.5);
			character[input_len][1] = new pair("e",0.3);
			character[input_len][2] = new pair("r",0.8);
			character[input_len][3] = new pair("f",0.2);
		}
		*/
	}
	private void sunja()
	{
		int i,j,	temp_len=0 , now_len=0;

		pair tt;
		temp.clear();
		String ts;
		double tm;
		for(i=0 ; i<pre_len; i++)
		{
			for(j=0 ; j<in_l[input_len] ; j++)
			{
				tt = new pair();
			//	System.out.println("" + input_len+character[input_len][j].s+" "+character[input_len][j].f + " "+pre[i].f);
				tm = pre[i].f<0?character[input_len][j].f:pre[i].f * character[input_len][j].f ;
				if(tm < tm_limit)
					break;
				ts = pre[i].s+ character[input_len][j].s;
				tt.set(ts,tm);
				temp.add(tt);
//				System.out.println(""+temp.get(temp_len).s + temp.get(temp_len).f);
				temp_len++;
			}
		}
		Collections.sort(temp);

		pre_len=temp_len;
		if(pre_len>MAX_DB)
			pre_len=MAX_DB;
		for(i=0 ; i<pre_len; i++)
		{
//			now[i]= new pair(temp.get(i).s,temp.get(i).f);
//			System.out.println("now is "+now[i].s + " "+now[i].f);
//			pre[i] = now[i];
			pre[i]= new pair(temp.get(i).s,temp.get(i).f);
		}
		//pre_len = now_len;
		

	}

	private void calfin()
	{
		int i, j;
		pair tt;
		fin.clear();
		for(i=0; i<pre_len; i++)
		{
			tt= new pair();
			tt.s = pre[i].s;
			tt.f = Node.getfreq(dictree.root,pre[i].s);
			tt.f = tt.f*tt.f*pre[i].f;
	//		System.out.println(" tt "+tt.s+" "+now[i].f+" "+Node.getfreq(dictree.root,now[i].s) + Node.isword(dictree.root,now[i].s));
			fin.add(tt);
		}
		Collections.sort(fin);
		
	}
	public void state(int x1,int y1)
	{
		if(x1<0 || y1<0)
		{
			go();
			inil();
		}
		else
		{
			if(input_len<MAX_LEN)
			{
				input.set(x1,y1);
				getchar(input);
				sunja();
				calfin();
				input_len++;
			}
		}
	}
}
